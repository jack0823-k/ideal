/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.20
 * Generated at: 2020-11-06 23:34:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import controller.MenuOperationSvl;
import model.MenuType;
import java.util.*;

public final class menuInsert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	static String fmtNull(String s){
		if(s == null || s.equals("")){
			s = "";
		}
		return s;

	}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/incFile.jsp", Long.valueOf(1604636712141L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("controller.MenuOperationSvl");
    _jspx_imports_classes.add("model.MenuType");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n");
      out.write("<title>新規メニュー登録画面</title>\r\n");
      out.write("\t<style>\r\n");
      out.write("\t<!--\r\n");
      out.write("\t\ttable \t\t{margin: auto;}\r\n");
      out.write("\t\tcaption \t{color: #009967; font-size: 18pt;}\r\n");
      out.write("\t\tth \t\t\t{text-align: left; background: #A4FFDB; color: #007B66;}\r\n");
      out.write("\t\ttd\t\t\t{background: #E3FFE3;}\r\n");
      out.write("\t\tth#bottom \t{text-align: center;}\r\n");
      out.write("\t\tp\t\t\t{text-align: center;}\r\n");
      out.write("-->\r\n");
      out.write("\t</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("<!--\r\n");
      out.write("\tfunction dataCheck(obj) {\r\n");
      out.write("\t\tvar msg = \"\";\r\n");
      out.write("\t\tif (obj.menuName.value.length < 1) {\r\n");
      out.write("\t\t\tmsg += \"メニュー名を入力してください。\\n\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (!obj.price.value.match(/^[0-9]+$/g)) {\r\n");
      out.write("\t\t\tmsg += \"価格を数値で入力してください。\\n\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar i;\r\n");
      out.write("\t\tfor (i = 0; i < obj.orderFlg.length; i++) {\r\n");
      out.write("\t\t\tif (obj.orderFlg[i].checked) {\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (i >= obj.orderFlg.length) {\r\n");
      out.write("\t\t\tmsg += \"オーダーの可否をチェックしてください\\n\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (msg.length > 0) {\r\n");
      out.write("\t\t\talert(msg);\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("//-->\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");

	int typeId;
	try{
		typeId = Integer.parseInt(request.getParameter("typeId"));
	}catch(NumberFormatException e){
		typeId = 100;
	}

      out.write("\r\n");
      out.write("\r\n");
      java.util.ArrayList mType = null;
      mType = (java.util.ArrayList) _jspx_page_context.getAttribute("mType", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (mType == null){
        mType = new java.util.ArrayList();
        _jspx_page_context.setAttribute("mType", mType, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      java.util.ArrayList menu = null;
      menu = (java.util.ArrayList) _jspx_page_context.getAttribute("menu", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (menu == null){
        menu = new java.util.ArrayList();
        _jspx_page_context.setAttribute("menu", menu, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write("\r\n");
      out.write("<table border>\r\n");
      out.write("\t<caption>新しいメニューを追加</caption>\r\n");
      out.write("\t <p align =\"center\">");
      out.print( fmtNull((String)request.getAttribute("msg")) );
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("\t<form action = \"MenuOperationSvl\" method = \"post\" onSubmit = \"return dataCheck(this);\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th>メニュー名</th>\r\n");
      out.write("\t\t<td><input type = \"text\" name = \"menuName\" size = \"30\"/></td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th>価格</th>\r\n");
      out.write("\t\t<td><input type = \"text\" name = \"price\" size = \"6\"/></td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th>オーダー可</th>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<input type = \"radio\" name = \"orderFlg\" value = \"1\" size = \"30\"/>可\r\n");
      out.write("\t\t\t<input type = \"radio\" name = \"orderFlg\" value = \"0\" size = \"30\"/>不可\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th>分類</th>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<select name = \"typeId\">\r\n");

			for(Object o : mType){
				MenuType mt = (MenuType)o;
				if(mt.getTypeId() == 100){
					continue;
				}
				String selected = "";
				if(typeId == mt.getTypeId()){
					selected = "selected";
				}else{
					selected = "";
				}

      out.write("\r\n");
      out.write("\t\t\t<option value = \"");
      out.print(((MenuType)o).getTypeId() );
      out.write('"');
      out.print( selected );
      out.write(">\r\n");
      out.write("\t\t\t");
      out.print( ((MenuType)o).getTypeName() );
      out.write("</option>\r\n");

}

      out.write("\r\n");
      out.write("\t\t\t</select>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th>コメント</th>\r\n");
      out.write("\t\t<td><textarea name=\"detail\" cols=\"30\" rows=\"4\"\r\n");
      out.write("\t\t\t\t\t\tstyle=\"ime-mode: active;\"></textarea></td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t\t<input type = \"hidden\" name = \"mode\" value = \"");
      out.print( MenuOperationSvl.INSERT );
      out.write("\" />\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th colspan = \"2\" id = \"bottom\"><input type = \"submit\" value = \"メニューを追加\"/></th>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t</form>\r\n");
      out.write("</table>\r\n");
      out.write("<p><a href = \"MenuMaintenanceSvl\">一覧表示画面へ戻る</a></p>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
